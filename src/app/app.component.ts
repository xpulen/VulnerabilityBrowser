import {Component, OnInit} from '@angular/core';
import {HttpClient, HttpParams} from '@angular/common/http';
import {FusekiResponseModel} from './fusekiResponse.model';
import {Pagination} from './pagination.model';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: [
    './app.component.css'
  ]
})
export class AppComponent implements OnInit {
  title = 'VulnerabilityBrowser';
  childrenQuery: FusekiResponseModel;
  parentQuery: FusekiResponseModel;
  searchQuery: FusekiResponseModel;
  itemTitle = '';
  keywords: [{name: string}] = [{name: ''}];
  limit = 10;
  searchPages = new Pagination(this.limit);
  childrenPages = new Pagination(this.limit);
  parentPages = new Pagination(this.limit);

  constructor(private http: HttpClient) {
  }

  ngOnInit() {
  }

  runQueries(obj: string) {
    this.itemTitle = obj;
    this.getChildren(obj);
    this.getChildrenCount(obj);
    this.getParents(obj);
    this.getParentCount(obj);
  }

  refresh() {
    this.searchPages.updateLimit(this.limit);
    this.childrenPages.updateLimit(this.limit);
    this.parentPages.updateLimit(this.limit);
    this.runSearch();
    if (this.itemTitle !== '') {
      this.runQueries(this.itemTitle);
    }
  }

  addKeywordField() {
    if (this.keywords.length < 5) {
      this.keywords.push({name: ''});
    }
  }

  removeKeyword(num) {
    this.keywords.splice(num, 1);
  }

  trackByIndex = (index: number): number => index;

  goToPage(caller: string, event) {
    // tslint:disable-next-line:radix
    const pageNum = parseInt(event.target.innerText);
    switch (caller) {
      case 'search':
        this.searchPages.updatePage(pageNum);
        this.runSearch();
        break;
      case 'children':
        this.childrenPages.updatePage(pageNum);
        this.getChildren(this.itemTitle);
        this.getChildrenCount(this.itemTitle);
        break;
      case 'parents':
        this.parentPages.updatePage(pageNum);
        this.getParents(this.itemTitle);
        this.getParentCount(this.itemTitle);
    }
  }

  runSearch() {
    this.searchForKeywords();
    this.getKeywordCount();
  }

  getChildren(obj: string) {
    let searchParams = new HttpParams();
    searchParams = searchParams.append('query',
      'SELECT ?subject ?predicate ?object ' +
      'WHERE {' +
      `${obj} ?predicate ?object` +
      '}' +
      `LIMIT ${this.limit} OFFSET ${this.childrenPages.offset}`);
    searchParams = searchParams.append('output', 'json');
    this.http
      .get<FusekiResponseModel>(
        'http://147.175.121.215:3030/cve-oval-cwe/sparql',
        {
          params: searchParams
        }
      )
      .subscribe((res: FusekiResponseModel) => {
        this.childrenQuery = this.formatAny(res);
      });
  }

  getChildrenCount(obj: string) {
    let searchParams = new HttpParams();
    searchParams = searchParams.append('query',
      'SELECT (COUNT(?object) as ?total) ' +
      'WHERE {' +
      `${obj} ?predicate ?object` +
      '}');
    searchParams = searchParams.append('output', 'json');
    this.http
      .get<FusekiResponseModel>(
        'http://147.175.121.215:3030/cve-oval-cwe/sparql',
        {
          params: searchParams
        }
      )
      .subscribe((res: FusekiResponseModel) => {
        // tslint:disable-next-line:radix
        this.childrenPages.entriesTotal = parseInt(res.results.bindings[0].total.value);
        this.childrenPages.getPageCount();
      });
  }

  getParents(obj: string) {
    let searchParams = new HttpParams();
    searchParams = searchParams.append('query',
      'SELECT ?subject ?predicate ?object ' +
      'WHERE {' +
      `?subject ?predicate ${obj}` +
      '}' +
      `LIMIT ${this.limit} OFFSET ${this.parentPages.offset}`);
    searchParams = searchParams.append('output', 'json');
    this.http
      .get<FusekiResponseModel>(
        'http://147.175.121.215:3030/cve-oval-cwe/sparql',
        {
          params: searchParams
        }
      )
      .subscribe((res: FusekiResponseModel) => {
        this.parentQuery = this.formatAny(res);
      });
  }

  getParentCount(obj: string) {
    let searchParams = new HttpParams();
    searchParams = searchParams.append('query',
      'SELECT (COUNT(?subject) as ?total) ' +
      'WHERE {' +
      `?subject ?predicate ${obj}` +
      '}');
    searchParams = searchParams.append('output', 'json');
    this.http
      .get<FusekiResponseModel>(
        'http://147.175.121.215:3030/cve-oval-cwe/sparql',
        {
          params: searchParams
        }
      )
      .subscribe((res: FusekiResponseModel) => {
        // tslint:disable-next-line:radix
        this.parentPages.entriesTotal = parseInt(res.results.bindings[0].total.value);
        this.parentPages.getPageCount();
      });
  }

  buildFilterString() {
    let filterString = '';
    for (const keyword of this.keywords) {
      if (keyword.name !== '') {
        filterString += ` FILTER regex(?object, "${keyword.name}", "i") `;
      }
    }
    return filterString;
  }

  searchForKeywords() {
    console.log(this.searchPages);
    let searchParams = new HttpParams();
    const filterString = this.buildFilterString();
    searchParams = searchParams.append('query',
      'SELECT ?subject ?predicate ?object ' +
      'WHERE {' +
      '?subject ?predicate ?object' +
      filterString +
      '}' +
      `LIMIT ${this.limit} OFFSET ${this.searchPages.offset}`);
    searchParams = searchParams.append('output', 'json');
    this.http
      .get<FusekiResponseModel>(
        'http://147.175.121.215:3030/cve-oval-cwe/sparql',
        {
          params: searchParams
        }
      )
      .subscribe((res: FusekiResponseModel) => {
        this.searchQuery = this.formatAny(res);
      });
  }

  getKeywordCount() {
    let searchParams = new HttpParams();
    const filterString = this.buildFilterString();
    searchParams = searchParams.append('query',
      'SELECT (COUNT(?object) as ?total) ' +
      'WHERE {' +
      '?subject ?predicate ?object' +
      filterString +
      '}');
    searchParams = searchParams.append('output', 'json');
    this.http
      .get<FusekiResponseModel>(
        'http://147.175.121.215:3030/cve-oval-cwe/sparql',
        {
          params: searchParams
        }
      )
      .subscribe((res: FusekiResponseModel) => {
        // tslint:disable-next-line:radix
        this.searchPages.entriesTotal = parseInt(res.results.bindings[0].total.value);
        this.searchPages.getPageCount();
      });
  }

  formatAny(res: FusekiResponseModel) {
    for (const entry of res.results.bindings) {
      if (entry.hasOwnProperty('subject')) {
        entry.subject.value_pretty = entry.subject.value.replace('http://FEI-STU/TP2019/', '');
      }
      if (entry.hasOwnProperty('predicate')) {
        entry.predicate.value_pretty = entry.predicate.value.replace('http://FEI-STU/TP2019/', '');
      }
      if (entry.hasOwnProperty('object')) {
        entry.object.value_pretty = entry.object.value.replace('http://FEI-STU/TP2019/', '');
      }
    }
    return res;
  }
}
